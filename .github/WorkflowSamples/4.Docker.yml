name: Build and save image to dockerhub

on:
  #Define when action should trigger
  push:
    branches: [ "main" ]

jobs:
  build-and-push:
    #Create job to build docker image and publish to dockerhub
    #Dockerhub username and access token should be saved as github vars/secrets
    #Reminder, java programs wil need to build JAR file before docker image can be created
    #HINT: Github actions has well documented docker actions, https://docs.docker.com/build/ci/github-actions/
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build JAR file
        run: mvn clean package -DskipTests

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/app:latest
  deploy:
    #Create job to deploy docker image to pre-existing aws ec2 instance
    #EC2 host(ip address), user, and ssh key should be saved as github secrets
    #HINT: there are many ways to accomplish this. SSH into the instance and run the appropriate shell commands,
    # or find a suitable pre-existing action to use
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: SSH into EC2 and deploy Docker container
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo yum update -y
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER  # Add user to docker group
            fi

            sudo docker pull ${{ vars.DOCKERHUB_USERNAME }}/app:latest
            sudo docker stop demo-container || true
            sudo docker rm demo-container || true
            sudo docker run -d -p 8080:8080 --name demo-container ${{ vars.DOCKERHUB_USERNAME }}/app:latest
