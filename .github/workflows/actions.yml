name: Build and save image to dockerhub

on:
  push:
    branches: [ "main" ]

jobs:
#  build-and-push:
#    runs-on: ubuntu-latest
#    steps:
#      # Add a step to check out your repository under $GITHUB_WORKSPACE, so your job can access it
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up java
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'temurin'
#          java-version: '17'
#
#      - name: Build JAR file
#        run: mvn clean package -DskipTests
#
#      - name: Login to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ vars.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v3
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#
#      - name: Build and push
#        uses: docker/build-push-action@v6
#        with:
#          context: .
#          push: true
#          tags: ${{ vars.DOCKERHUB_USERNAME }}/app:latest
#  deploy:
#    runs-on: ubuntu-latest
#    needs: build-and-push
#    steps:
#      - name: SSH into EC2 and deploy Docker container
#        uses: appleboy/ssh-action@v0.1.7
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ${{ secrets.EC2_USER }}
#          key: ${{ secrets.EC2_SSH_KEY }}
#          script: |
#            if ! command -v docker &> /dev/null; then
#              echo "Installing Docker..."
#              sudo yum update -y
#              sudo yum install -y docker
#              sudo systemctl start docker
#              sudo systemctl enable docker
#              sudo usermod -aG docker $USER  # Add user to docker group
#            fi
#
#            sudo docker pull ${{ vars.DOCKERHUB_USERNAME }}/app:latest
#            sudo docker stop demo-container || true
#            sudo docker rm demo-container || true
#            sudo docker run -d -p 8080:8080 --name demo-container ${{ vars.DOCKERHUB_USERNAME }}/app:latest

  terraform:
    runs-on: ubuntu-latest
    env:
      TF_VAR_ec2_ssh_key: ${{ secrets.EC2_SSH_KEY }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: Install ansible
        run: sudo apt update && sudo apt install -y ansible

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform init
        run: terraform init
        working-directory: infrastructure

      - name: Terraform apply
        run: terraform apply --auto-approve
        working-directory: infrastructure

      - name: Run ansible
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/private_key.pem
          chmod 600 /tmp/private_key.pem
          ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i '${{ secrets.EC2_PUBLIC_IP}},' -u ec2-user --private-key /tmp/private_key.pem playbook.yml
        working-directory: infrastructure